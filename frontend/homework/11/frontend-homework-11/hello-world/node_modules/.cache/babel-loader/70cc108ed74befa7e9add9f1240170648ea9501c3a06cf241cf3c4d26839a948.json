{"ast":null,"code":"var _jsxFileName = \"/Users/bhuvang/Downloads/Quots-React/hello-world/src/App.tsx\",\n  _s = $RefreshSig$();\nimport './App.scss';\nimport { useEffect, useState } from 'react';\nimport Quotes from './Quotes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [quotes, setQuotes] = useState([]);\n  let [generate, setGenerate] = useState(true);\n  const [search, setSearch] = useState(\"\");\n  const [allquotes, setAllquotes] = useState([]);\n  const [filterQuotes, setFilterQuotes] = useState([]);\n  useEffect(() => {\n    setQuotes(allquotes => {\n      return allquotes.filter(quote => quote.content.includes(search));\n    });\n  }, [search, allquotes]);\n\n  //  useEffect(()=>{\n  // setQuotes(allquotes)\n  // },[allquotes])\n  // let generate = false;\n  const onSearchChangeHandler = e => {\n    setSearch(e.target.value);\n  };\n\n  // const getNewQuote = (e:any) => {\n  //   fetch(\"https://api.quotable.io/quotes/random\")\n  //   .then((response) => response.json())\n  //   .then((data:ApiQuote)=>{\n  //     setQuotes([...allquotes,data]);\n  //   });\n  // }  \n\n  function getNewQuote() {\n    setGenerate(!generate);\n  }\n  function addFilter(e) {\n    setFilterQuotes(e.target.value);\n    console.log(\"vl:\", e.target);\n    console.log(filterQuotes);\n  }\n  useEffect(() => {\n    fetch(\"https://api.quotable.io/quotes/random\").then(response => response.json()).then(data => {\n      setQuotes([data[0], ...quotes]);\n    });\n  }, [generate]);\n  useEffect(() => {\n    fetch(\"https://api.quotable.io/quotes/random?limit=3\").then(response => response.json()).then(data => {\n      setQuotes(data);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"new-quote\",\n      onClick: getNewQuote,\n      children: \"New Quotes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"filter-input\",\n      type: \"text\",\n      placeholder: \"Filter\",\n      onChange: onSearchChangeHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }, this), quotes.map(quote => {\n      return /*#__PURE__*/_jsxDEV(Quotes, {\n        quote: quote,\n        filterquote: filterQuotes,\n        addFilter: addFilter\n      }, quote._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 14\n      }, this);\n    })]\n  }, void 0, true);\n}\n_s(App, \"Kk3ut0jJajywXbQYtNmKpYjO2II=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","Quotes","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","quotes","setQuotes","generate","setGenerate","search","setSearch","allquotes","setAllquotes","filterQuotes","setFilterQuotes","filter","quote","content","includes","onSearchChangeHandler","e","target","value","getNewQuote","addFilter","console","log","fetch","then","response","json","data","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","map","filterquote","_id","_c","$RefreshReg$"],"sources":["/Users/bhuvang/Downloads/Quots-React/hello-world/src/App.tsx"],"sourcesContent":["\nimport './App.scss';\nimport { useEffect, useState } from 'react';\nimport { ApiQuote } from './types/quotes.types';\nimport Quotes from './Quotes';\n\nfunction App() {\n\nconst [quotes,setQuotes] = useState<ApiQuote[]>([]);\nlet [generate, setGenerate] = useState(true);\nconst [search,setSearch] = useState<string>(\"\");\nconst [allquotes, setAllquotes] = useState<ApiQuote[]>([]);\nconst [filterQuotes,setFilterQuotes] = useState<string[]>([]);\nuseEffect(()=>{\n  setQuotes((allquotes)=>{\n    return allquotes.filter((quote)=> \n    quote.content.includes(search))\n  })\n\n},[search, allquotes]);\n\n//  useEffect(()=>{\n// setQuotes(allquotes)\n// },[allquotes])\n// let generate = false;\nconst onSearchChangeHandler = (e:any) => {\n    setSearch(e.target.value);\n  }\n\n\n// const getNewQuote = (e:any) => {\n//   fetch(\"https://api.quotable.io/quotes/random\")\n//   .then((response) => response.json())\n//   .then((data:ApiQuote)=>{\n//     setQuotes([...allquotes,data]);\n//   });\n// }  \n\nfunction getNewQuote()\n    {\n      setGenerate(!generate)\n    } \nfunction addFilter(e:any) : void{\n  setFilterQuotes(e.target.value);\n  console.log(\"vl:\",e.target);\n  \n  console.log(filterQuotes);\n\n}    \n    useEffect(()=>{\n      fetch(\"https://api.quotable.io/quotes/random\")\n      .then((response) => response.json())\n      .then((data:ApiQuote[])=>{\n        setQuotes([data[0],...quotes]);\n    });\n    },[generate]);\n        \n  useEffect(()=>{\n    fetch(\"https://api.quotable.io/quotes/random?limit=3\")\n    .then((response) => response.json())\n    .then((data:ApiQuote[])=>{\n      setQuotes(data);\n    });\n  },[]);\n\n  return (\n    <>\n    {/* {JSON.stringify(quotes)} */}\n    <button className='new-quote' onClick={getNewQuote}>New Quotes</button>\n    <input className='filter-input' type=\"text\" placeholder='Filter' onChange={onSearchChangeHandler}/>\n    {quotes.map((quote)=>{\n      return <Quotes key = {quote._id} quote=\n      {quote} filterquote={filterQuotes} addFilter={addFilter}/>\n    })}\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}