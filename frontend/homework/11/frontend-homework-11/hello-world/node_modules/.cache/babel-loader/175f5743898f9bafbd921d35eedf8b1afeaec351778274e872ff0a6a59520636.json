{"ast":null,"code":"var _jsxFileName = \"/Users/bhuvang/Downloads/Quots-React/hello-world/src/App.tsx\",\n  _s = $RefreshSig$();\nimport './App.scss';\nimport { useEffect, useState } from 'react';\nimport Quotes from './Quotes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [quotes, setQuotes] = useState([]);\n  let [generate, setGenerate] = useState(true);\n  const [search, setSearch] = useState(\"\");\n  const [allquotes, setAllquotes] = useState([]);\n  const [filterQuotes, setFilterQuotes] = useState([]);\n  useEffect(() => {\n    setQuotes(allquotes => {\n      return allquotes.filter(quote => quote.tags[0].includes(filterQuotes[0]));\n    });\n  }, [search, allquotes, filterQuotes]);\n\n  //  useEffect(()=>{\n  // setQuotes(allquotes)\n  // },[allquotes])\n  // let generate = false;\n  // const onSearchChangeHandler = (e:any) => {\n  //     setSearch(e.target.value);\n  //   }\n\n  // const getNewQuote = (e:any) => {\n  //   fetch(\"https://api.quotable.io/quotes/random\")\n  //   .then((response) => response.json())\n  //   .then((data:ApiQuote)=>{\n  //     setQuotes([...allquotes,data]);\n  //   });\n  // }  \n\n  function getNewQuote() {\n    setGenerate(!generate);\n  }\n  // function addFilter(e:any) : void{\n  //   setFilterQuotes(e.target.innerHTML);\n  //   console.log(\"vl:\",e.target);\n\n  //   console.log(filterQuotes);\n\n  // }  \n  function onDelete() {}\n  useEffect(() => {\n    fetch(\"https://api.quotable.io/quotes/random\").then(response => response.json()).then(data => {\n      setQuotes([data[0], ...quotes]);\n    });\n  }, [generate]);\n  const removeFilter = filter => {\n    setFilterQuotes(filterQuotes.filter(f => f !== filter));\n  };\n  useEffect(() => {\n    fetch(\"https://api.quotable.io/quotes/random?limit=3\").then(response => response.json()).then(data => {\n      setQuotes(data);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"new-quote\",\n      onClick: getNewQuote,\n      children: \"New Quotes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"title\",\n      children: \"Filters\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filters\",\n      children: filterQuotes.length > 0 && filterQuotes.map(filter => {\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"filter\",\n          children: [filter, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"remove-btn\",\n            onClick: () => removeFilter(filter),\n            children: \"X\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 17\n          }, this)]\n        }, filter, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), quotes.map(quote => {\n      return /*#__PURE__*/_jsxDEV(Quotes, {\n        quote: quote,\n        filterQuotes: filterQuotes,\n        setFilterQuotes: setFilterQuotes\n      }, quote._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 14\n      }, this);\n    })]\n  }, void 0, true);\n}\n_s(App, \"Kk3ut0jJajywXbQYtNmKpYjO2II=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","Quotes","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","quotes","setQuotes","generate","setGenerate","search","setSearch","allquotes","setAllquotes","filterQuotes","setFilterQuotes","filter","quote","tags","includes","getNewQuote","onDelete","fetch","then","response","json","data","removeFilter","f","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","length","map","_id","_c","$RefreshReg$"],"sources":["/Users/bhuvang/Downloads/Quots-React/hello-world/src/App.tsx"],"sourcesContent":["\nimport './App.scss';\nimport { useEffect, useState } from 'react';\nimport { ApiQuote } from './types/quotes.types';\nimport Quotes from './Quotes';\n\nfunction App() {\n\nconst [quotes,setQuotes] = useState<ApiQuote[]>([]);\nlet [generate, setGenerate] = useState(true);\nconst [search,setSearch] = useState<string>(\"\");\nconst [allquotes, setAllquotes] = useState<ApiQuote[]>([]);\nconst [filterQuotes,setFilterQuotes] = useState<string[]>([]);\n\n\nuseEffect(()=>{\n  setQuotes((allquotes)=>{\n    return allquotes.filter((quote)=> \n    quote.tags[0].includes(filterQuotes[0]))\n  })\n\n},[search, allquotes,filterQuotes]);\n\n//  useEffect(()=>{\n// setQuotes(allquotes)\n// },[allquotes])\n// let generate = false;\n// const onSearchChangeHandler = (e:any) => {\n//     setSearch(e.target.value);\n//   }\n\n\n// const getNewQuote = (e:any) => {\n//   fetch(\"https://api.quotable.io/quotes/random\")\n//   .then((response) => response.json())\n//   .then((data:ApiQuote)=>{\n//     setQuotes([...allquotes,data]);\n//   });\n// }  \n\nfunction getNewQuote()\n    {\n      setGenerate(!generate)\n    } \n// function addFilter(e:any) : void{\n//   setFilterQuotes(e.target.innerHTML);\n//   console.log(\"vl:\",e.target);\n  \n//   console.log(filterQuotes);\n\n// }  \nfunction onDelete(){\n\n}  \n    useEffect(()=>{\n      fetch(\"https://api.quotable.io/quotes/random\")\n      .then((response) => response.json())\n      .then((data:ApiQuote[])=>{\n        setQuotes([data[0],...quotes]);\n    });\n    },[generate]);\n\n    const removeFilter = (filter: string) => {\n      setFilterQuotes(filterQuotes.filter((f) => f !== filter));\n    };\n        \n  useEffect(()=>{\n    fetch(\"https://api.quotable.io/quotes/random?limit=3\")\n    .then((response) => response.json())\n    .then((data:ApiQuote[])=>{\n      setQuotes(data);\n    });\n  },[]);\n\n  return (\n    <>\n    {/* {JSON.stringify(quotes)} */}\n    <button className='new-quote' onClick={getNewQuote}>New Quotes</button>\n    {/* <input className='filter-input' type=\"text\" placeholder='Filter' onChange={onSearchChangeHandler} value={filterQuotes}/> */}\n    {/* <div className='filter-input' >{filterQuotes} <span onClick={onDelete}>X</span></div> */}\n    {/* <div className='filter-div'>\n    <p className='filter-tags'>{filterQuotes} <span className='button-X'>X</span></p>\n    <p className='button-X'>X</p>\n    </div> */}\n\n<h3 className=\"title\">Filters</h3>\n      <div className=\"filters\">\n        {filterQuotes.length > 0 &&\n          filterQuotes.map((filter) => {\n            return (\n              <span key={filter} className=\"filter\">\n                {filter}{\" \"}\n                <button\n                  className=\"remove-btn\"\n                  onClick={() => removeFilter(filter)}\n                >\n                  X\n                </button>\n              </span>\n            );\n          })}\n      </div>\n\n    {quotes.map((quote)=>{\n      return <Quotes key = {quote._id} quote=\n      {quote} filterQuotes={filterQuotes} setFilterQuotes={setFilterQuotes} />\n    })}\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}