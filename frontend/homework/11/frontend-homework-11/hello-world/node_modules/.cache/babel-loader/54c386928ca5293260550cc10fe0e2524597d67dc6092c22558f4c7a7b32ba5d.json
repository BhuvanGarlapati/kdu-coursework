{"ast":null,"code":"var _jsxFileName = \"/Users/bhuvang/Downloads/Quots-React/hello-world/src/App.tsx\",\n  _s = $RefreshSig$();\nimport './App.scss';\nimport { useEffect, useState } from 'react';\nimport Quotes from './Quotes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [quotes, setQuotes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [allquotes, setAllquotes] = useState([]);\n  useEffect(() => {\n    setQuotes(allquotes => {\n      return allquotes.filter(quote => quote.content.includes(search));\n    });\n  }, [search, allquotes]);\n\n  //  useEffect(()=>{\n  // setQuotes(allquotes)\n  // },[allquotes])\n\n  const onSearchChangeHandler = e => {\n    setSearch(e.target.value);\n  };\n  const getNewQuote = e => {\n    fetch(\"https://api.quotable.io/quotes/random\").then(response => response.json()).then(data => {\n      setQuotes(data);\n    });\n  };\n  useEffect(() => {\n    fetch(\"https://api.quotable.io/quotes/random?limit=3\").then(response => response.json()).then(data => {\n      setQuotes(data);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\"Hello\", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getNewQuote,\n      children: \"New Quotes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: onSearchChangeHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }, this), quotes.map(quote => {\n      return /*#__PURE__*/_jsxDEV(Quotes, {\n        quote: quote\n      }, quote._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 14\n      }, this);\n    })]\n  }, void 0, true);\n}\n_s(App, \"X7hS98qVtEb3pnj4gHYPgSV05BA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","Quotes","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","quotes","setQuotes","search","setSearch","allquotes","setAllquotes","filter","quote","content","includes","onSearchChangeHandler","e","target","value","getNewQuote","fetch","then","response","json","data","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","map","_id","_c","$RefreshReg$"],"sources":["/Users/bhuvang/Downloads/Quots-React/hello-world/src/App.tsx"],"sourcesContent":["\nimport './App.scss';\nimport { useEffect, useState } from 'react';\nimport { ApiQuote } from './types/quotes.types';\nimport Quotes from './Quotes';\n\nfunction App() {\n\nconst [quotes,setQuotes] = useState<ApiQuote[]>([]);\nconst [search,setSearch] = useState<string>(\"\");\nconst [allquotes, setAllquotes] = useState<ApiQuote[]>([]);\nuseEffect(()=>{\n  setQuotes((allquotes)=>{\n    return allquotes.filter((quote)=> \n    quote.content.includes(search))\n  })\n\n},[search, allquotes]);\n\n//  useEffect(()=>{\n// setQuotes(allquotes)\n// },[allquotes])\n\nconst onSearchChangeHandler = (e:any) => {\n    setSearch(e.target.value);\n  }\n\nconst getNewQuote = (e:any) => {\n  fetch(\"https://api.quotable.io/quotes/random\")\n  .then((response) => response.json())\n  .then((data:ApiQuote[])=>{\n    setQuotes(data);\n  });\n}  \n  \n  useEffect(()=>{\n    fetch(\"https://api.quotable.io/quotes/random?limit=3\")\n    .then((response) => response.json())\n    .then((data:ApiQuote[])=>{\n      setQuotes(data);\n    });\n  },[]);\n\n  return (\n    <>\n    Hello\n    {/* {JSON.stringify(quotes)} */}\n    <button onClick={getNewQuote}>New Quotes</button>\n    <input type=\"text\" onChange={onSearchChangeHandler}/>\n    {quotes.map((quote)=>{\n      return <Quotes key = {quote._id} quote=\n      {quote}/>\n    })}\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":";;AACA,OAAO,YAAY;AACnB,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,OAAOC,MAAM,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE9B,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEf,MAAM,CAACC,MAAM,EAACC,SAAS,CAAC,GAAGT,QAAQ,CAAa,EAAE,CAAC;EACnD,MAAM,CAACU,MAAM,EAACC,SAAS,CAAC,GAAGX,QAAQ,CAAS,EAAE,CAAC;EAC/C,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAa,EAAE,CAAC;EAC1DD,SAAS,CAAC,MAAI;IACZU,SAAS,CAAEG,SAAS,IAAG;MACrB,OAAOA,SAAS,CAACE,MAAM,CAAEC,KAAK,IAC9BA,KAAK,CAACC,OAAO,CAACC,QAAQ,CAACP,MAAM,CAAC,CAAC;IACjC,CAAC,CAAC;EAEJ,CAAC,EAAC,CAACA,MAAM,EAAEE,SAAS,CAAC,CAAC;;EAEtB;EACA;EACA;;EAEA,MAAMM,qBAAqB,GAAIC,CAAK,IAAK;IACrCR,SAAS,CAACQ,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC3B,CAAC;EAEH,MAAMC,WAAW,GAAIH,CAAK,IAAK;IAC7BI,KAAK,CAAC,uCAAuC,CAAC,CAC7CC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAe,IAAG;MACvBlB,SAAS,CAACkB,IAAI,CAAC;IACjB,CAAC,CAAC;EACJ,CAAC;EAEC5B,SAAS,CAAC,MAAI;IACZwB,KAAK,CAAC,+CAA+C,CAAC,CACrDC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAe,IAAG;MACvBlB,SAAS,CAACkB,IAAI,CAAC;IACjB,CAAC,CAAC;EACJ,CAAC,EAAC,EAAE,CAAC;EAEL,oBACExB,OAAA,CAAAE,SAAA;IAAAuB,QAAA,GAAE,OAEF,eACAzB,OAAA;MAAQ0B,OAAO,EAAEP,WAAY;MAAAM,QAAA,EAAC;IAAU;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACjD9B,OAAA;MAAO+B,IAAI,EAAC,MAAM;MAACC,QAAQ,EAAEjB;IAAsB;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,EACpDzB,MAAM,CAAC4B,GAAG,CAAErB,KAAK,IAAG;MACnB,oBAAOZ,OAAA,CAACF,MAAM;QAAmBc,KAAK,EACrCA;MAAM,GADeA,KAAK,CAACsB,GAAG;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvB,CAAC;IACX,CAAC,CAAC;EAAA,eACA,CAAC;AAEP;AAAC1B,EAAA,CAjDQD,GAAG;AAAAgC,EAAA,GAAHhC,GAAG;AAmDZ,eAAeA,GAAG;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}